#!/usr/bin/env ruby
require 'optparse'
require 'HTTParty'
require 'rails'
require 'json'
class Rule
  attr_reader :impact, :name, :suggestion
  def initialize(opts)
    @impact      = opts['ruleImpact'].to_f
    @name        = opts['localizedRuleName']
    @suggestion  = Suggestion.new(opts['urlBlocks'])
  end

  def to_s
    "#{'%.2f' % impact}: #{name}\n#{suggestion.to_s}"
  end
end

class Stats
  attr_reader :total_resources, :hosts, :static_resources, :js_resources, :css_resources,
              :total_bytes, :html_bytes, :css_bytes, :image_bytes, :js_bytes

  def initialize(h)
    @total_resources = h['numberResources']
    @hosts = h['numberHosts']
    @static_resources = h['numberStaticResources']
    @js_resources = h['numberJsResources']
    @css_resources = h['numberCssResources']
    @total_bytes = h['totalRequestBytes'].to_i
    @html_bytes = h['htmlResponseBytes'].to_i
    @css_bytes = h['cssResponseBytes'].to_i
    @image_bytes = h['imageResponseBytes'].to_i
    @js_bytes = h['javascriptResponseBytes'].to_i
  end

  def to_s
<<-EOS
Hosts:     #{hosts}
Resources: #{total_resources}, #{total_bytes / 1024}kB
   Static: #{static_resources}
   JS    : #{js_resources}, #{js_bytes / 1024}kB
   CSS   : #{css_resources}, #{css_bytes / 1024}kB
   HTML  : #{html_bytes / 1024}kB
   Images: #{image_bytes / 1024}kB
EOS
  end

  def to_h
    arr = %i(total_resources hosts static_resources js_resources css_resources
             total_bytes html_bytes css_bytes image_bytes js_bytes)
    Hash[arr.zip(arr.map {|m| send m})]
  end
end

class Suggestion
  attr_reader :bottom_line, :more_info_at
  def initialize(arr)
    base_info_from(arr.shift['header'])
  end

  def to_s
    @arr.to_s
  end

  private

  def base_info_from(hash)
    @bottom_line  = hash['format']
    if hash.has_key?('args')
      @more_info_at = hash['args'].first['value'] if hash['args'].first['type'] == 'HYPERLINK'
    end
  end

end

class SlowPage
  API_URL='https://www.googleapis.com/pagespeedonline/v1/runPagespeed'
  attr_reader :url, :strategy, :rule_results, :stats, :score
  def initialize(opts)
    @url = opts[:url]
    @url = "http://#{@url}" unless @url =~ /^https?:\/\//
    @api_key = opts[:key]
    @strategy = opts[:strategy]
    parse
  end

  def to_s
<<-EOS
Score: #{score}
#{stats.to_s}
#{rule_results.join("\n")}
EOS
  end

  def response
    @response ||= request_from_api
  end

  def parse
    @score = hash['score']
    @stats = Stats.new(hash['pageStats'])
    @rule_results = rules_from hash['formattedResults']['ruleResults']
  end

  private

  attr_reader :api_key

  def request_from_api
    opts_hash = {
      query: {
        key: api_key,
        url: url,
        prettyPrint: true,
        strategy: strategy
      }
    }
    HTTParty.get(API_URL, opts_hash)
  end

  def body
    response.body
  end

  def hash
    JSON.parse(body)
  end

  def rules_from(input_hash)
    input_hash.map do |k, rule_hash|
      Rule.new(rule_hash)
    end.select {|rule| rule.impact > 0.0 }
  end
end

DEFAULT_KEY_LOCATION='~/.googleapi.secret'

def key_from(file)
  (File.read File.expand_path(file)).chomp
end

def opts_from_cli
  options = {}
  opt_parser = OptionParser.new do |opts|
    opts.banner = "#{$0} [options] url"

    options[:verbose] = false
    opts.on('-v', '--verbose', 'Display more information') { options[:verbose] = true }

    options[:key] = nil
    opts.on('-f FILE', '--file FILE', 'File containing Google API key') do |file|
      begin
        options[:key] = key_from(file)
      rescue
        puts "Could not open #{file}"
        exit
      end
    end
    options[:key] = key_from(DEFAULT_KEY_LOCATION) if (options[:key].blank?)
    opts.on('-k KEY', '--key KEY', 'Google API key') { |key| options[:key] = key }
    options[:strategy] = 'desktop'
    opts.on('-s STRATEGY', '--strategy STRATEGY', 'Strategy: <desktop|mobile>') { |strat| options[:strategy] = strat if strat == 'mobile' }
    opts.on('-h', '--help', 'Display this screen') { puts opts ; exit }
  end

  opt_parser.parse!
  options[:url] = ARGV.pop
  abort opt_parser.to_s if options[:url].blank?
  options
end

options = opts_from_cli
slowpage = SlowPage.new(options)
puts slowpage.to_s
