#!/usr/bin/env ruby
require 'optparse'
require 'HTTParty'
require 'rails'
require 'json'
class SlowPage
  API_URL='https://www.googleapis.com/pagespeedonline/v1/runPagespeed'
  attr_reader :url
  def initialize(opts)
    @url = opts[:url]
    @url = "http://#{@url}" unless @url =~ /^https?:\/\//
    @api_key = opts[:key]
  end

  def to_s
    results.to_s
  end

  def response
    @response ||= request_from_api
  end

  def results
    ret = hash['formattedResults']['ruleResults'].values.delete_if {|h| h['ruleImpact'].to_f == 0.0 }
    ret.map! do |h|
      {
        name: h['localizedRuleName'],
        recommendation: 'recommendation',
        impact: h['ruleImpact'],
        url_blocks: h['urlBlocks']
      }
    end
    ret
  end

  def request_from_api
    opts_hash = {
      query: {
        key: api_key,
        url: url,
        prettyPrint: true
      }
    }
    HTTParty.get(API_URL, opts_hash)
  end

  def body
    response.body
  end

  def hash
    JSON.parse(body)
  end

  private

  attr_reader :api_key
end

DEFAULT_KEY_LOCATION='~/.googleapi.secret'

def key_from(file)
  (File.read File.expand_path(file)).chomp
end

def opts_from_cli
  options = {}
  opt_parser = OptionParser.new do |opts|
    opts.banner = "#{$0} [options] url"

    options[:verbose] = false
    opts.on('-v', '--verbose', 'Display more information') { options[:verbose] = true }

    options[:key] = nil
    opts.on('-f FILE', '--file FILE', 'File containing Google API key') do |file|
      puts "#{file}"
      begin
        options[:key] = key_from(file)
      rescue
        puts "Could not open #{file}"
        exit
      end
    end
    options[:key] = key_from(DEFAULT_KEY_LOCATION) if (options[:key].blank?)
    opts.on('-k', '--key', 'Google API key') { |key| options[:key]}
    opts.on('-h', '--help', 'Display this screen') { puts opts ; exit }
  end

  opt_parser.parse!
  options[:url] = ARGV.pop
  abort opt_parser.to_s if options[:url].blank?
  options
end

options = opts_from_cli
slowpage = SlowPage.new(options)
puts slowpage.results[1][:url_blocks]
# puts slowpage.body
