taps=(
  ffleming/formulae  # My formulae - dependency for nethack-nao and mutt
  neovim/neovim      # Neovim
  caskroom/cask      # Dependency for brew cask
  caskroom/versions  # Dependency for sublime 3
)

for tap in ${taps[*]}; do
  fancy_echo "Tapping $tap ..."
  brew tap "$tap"
done

homebrew=(
  colordiff tree wget watch rename dos2unix # Various CLI tools
  git                                       #   SCM
  mutt-sidebar                              #   Email
  contacts                                  #   Email contacts
  nethack-nao                               #   The best game
  links                                     #   Web browser
  w3m                                       #   Web browser (better for scripts)
  'ffmpeg --with-faac --with-ffplay'        #   Video encoding
  aalib                                     #   It's impossible to work during the holidays without aafire
  calc                                      #   Calculator
  p7zip                                     #   7zip
  awscli                                    #   Amazon Web Services
  keybase                                   #   Keybase
  'lastpass-cli --with-pinentry --with-doc' #   LastPass
  gifsicle                                  #   For making animated gifs
  fontconfig                                # Customized font access
  gawk gcc scala rust ghc                   # Compilers and related
  sbt cabal-install                         # Build tools & package managers
  valgrind                                  # Detect memory leaks
  qemu                                      # Processor emulator
  gpg                                       # GNU privacy guard
  mongodb                                   # Mongo nosql
  tmate                                     # Easy pair programming
  nvm                                       # Node version manager
  dhex                                      # CLI hex editor
                                            # Pentesting/infosec tools
  aircrack-ng                               #   Wifi sniffing/cracking/injection suite
  reaver                                    #   Wifi WSP PIN cracking suite
  iperf3                                    #   Network performance
  john                                      #   John the Ripper brute force cracker
  hydra                                     #   Hydra network password brute force cracker
  zsh-completions                           # Shell niceties
  zsh-history-substring-search              #
  zsh-syntax-highlighting                   #
)

for package in ${homebrew[*]}; do
  fancy_echo "Installing or upgrading $package ..."
  brew_install_or_upgrade $package
done

cask=(
  google-chrome firefox # browsers
  sequel-pro            # MySQL frontend
  sublime-text3         # code editor
  iterm2                # terminal emulator
  name-mangler          # batch file renamer
  appcleaner            # removes apps and related files
  hipchat               # private corporate chat
  keka                  # un/archiver (importantly, 7zip)
  qlmarkdown            # parse markdown in quicklook
  vlc                   # video file player
  steam                 # for games
  dropbox               # file sync
  hashcat               # Brute force password cracker
)

for app in ${cask[*]}; do
  fancy_echo "Installing $app ..."
  brew cask install $app
done

if [[ ! -d "$HOME/.rvm" ]]; then
  fancy_echo "Installing RVM..."
    eval '\curl -sSL https://get.rvm.io | bash -s stable'
fi

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Setting PATH for RVM..."
  source $(rvm $ruby_version do rvm env --path)

fancy_echo "Upgrading and linking system dependencies for Ruby builds ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force
  brew_install_or_upgrade 'libyaml'

fancy_echo "Installing Ruby $ruby_version ..."
  rvm install $ruby_version &> /dev/null

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rvm alias create default $ruby_version &> /dev/null

gems=(
  i2cssh        # CLI launcher for iterm2 to launch e.g. www0{1-3}.server.prod and then send commands to each of them
  benchmark-ips # iterations per second for Benchmark
  dogsay        # The most important gem
)

for rubygem in ${gems[*]}; do
  fancy_echo "Installing $rubygem ..."
  gem install $rubygem
done

if [ ! -e '/usr/local/bin/ssh-copy-id' ]; then
  fancy_echo "Installing ssh-copy-id"
    curl -L 'https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh' | sh
else
  fancy_echo "ssh-copy-id is already installed"
fi

fancy_echo "Configuring nvm..."
  node_version="0.10"
  append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source "$(brew --prefix nvm)/nvm.sh"
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"

node_modules=(
  tmi
  psi
  bench-rest
  forever
  gulp
)

for module in ${node_modules[*]}; do
  fancy_echo "Installing $module ..."
  npm install $module -g
done

fancy_echo "Linking airport sniffer binary to /usr/local/sbin/airport"
  if [ ! -h "/usr/local/sbin/airport" ] ; then
    ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/sbin/airport
  fi

# Allow selection of text within Quicklook
defaults write com.apple.finder QLEnableTextSelection -bool true

# Use .png as default for screenshots
defaults write com.apple.screencapture type png
killall SystemUIServer

