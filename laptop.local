taps=(
  ffleming/formulae  # My formulae - dependency for nethack-nao and mutt
  neovim/neovim      # Neovim
  nviennot/tmate     # Pair programming
  caskroom/cask      # Dependency for brew cask
  caskroom/versions  # Dependency for sublime 3
)

for tap in ${taps[*]}; do
  fancy_echo "Tapping $tap ..."
  brew tap "$tap"
done

homebrew=(
  colordiff                 # colorized diff
  fontconfig                # customized font access
  gawk gcc                  # updated cli utilities
  gnu-indent gnu-sed        #     |
  tree wget                 #    \|/
  watch xtail rename        #     '
  gnu-tar gnu-which         #
  git git-flow              # git & gitflow
  zsh-completions                  #   |
  zsh-history-substring-search     #   v
  zsh-syntax-highlighting          # zsh customizations
  tmate                     # for pair programming
  dos2unix                  # because OSX Excel still outputs awful windows-formatted .csv files
  mutt-sidebar              # CLI email
  nethack-nao               # The best game
  contacts                  # For OSX contacts
  links                     # CLI web browser
  w3m                       # CLI web browser (better for scripts)
  'ffmpeg --with-faac --with-ffplay'      # Video encoding
  gifsicle                  # For making animated gifs
  mongodb                   # database
  nvm                       # It's RVM, but for node
  brew-cask                 # brew-ish manager for .app applications
)

for package in ${homebrew[*]}; do
  fancy_echo "Installing or upgrading $package ..."
  brew_install_or_upgrade $package
done

cask=(
  google-chrome firefox   # browsers
  sequel-pro              # MySQL frontend
  sublime-text3            # code editor
  iterm2                  # terminal emulator
  name-mangler  # batch file renamer
  appcleaner    # removes apps and related files
  hipchat       # private corporate chat
  virtualbox    # virtualization
  keka          # un/archiver (importantly, 7zip)
  qlmarkdown    # parse markdown in quicklook
  vlc           # video file player
  steam         # for games
  dropbox       # file sync
)

for app in ${cask[*]}; do
  fancy_echo "Installing $app ..."
  brew cask install $app
done

if [[ ! -d "$HOME/.rvm" ]]; then
  fancy_echo "Installing RVM..."
    eval '\curl -sSL https://get.rvm.io | bash -s stable'
fi

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Setting PATH for RVM..."
  source $(rvm $ruby_version do rvm env --path)

fancy_echo "Upgrading and linking system dependencies for Ruby builds ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force
  brew_install_or_upgrade 'libyaml'

fancy_echo "Installing Ruby $ruby_version ..."
  rvm install $ruby_version &> /dev/null

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rvm alias create default $ruby_version &> /dev/null

gems=(
  i2cssh        # CLI launcher for iterm2 to launch e.g. www0{1-3}.server.prod and then send commands to each of them
  benchmark-ips # iterations per second for Benchmark
  dogsay        # The most important gem
)

for rubygem in ${gems[*]}; do
  fancy_echo "Installing $rubygem ..."
  gem install $rubygem
done

perl_modules=(
  Perl::Critic
  Modern::Perl
)

for module in ${perl_modules[*]}; do
  fancy_echo "Installing $module ..."
  sudo cpan $module
done

if [ ! -e '/usr/local/bin/ssh-copy-id' ]; then
  fancy_echo "Installing ssh-copy-id"
    curl -L 'https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh' | sh
else
  fancy_echo "ssh-copy-id is already installed"
fi

fancy_echo "Configuring nvm..."
  node_version="0.10"
  append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source "$(brew --prefix nvm)/nvm.sh"
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"

node_modules=(
  tmi
  psi
  bench-rest
  forever
)

for module in ${node_modules[*]}; do
  fancy_echo "Installing $module ..."
  npm install $module -g
done

# Allow selection of text within Quicklook
defaults write com.apple.finder QLEnableTextSelection -bool true

# Use .png as default for screenshots
defaults write com.apple.screencapture type png
killall SystemUIServer

if [[ -f ~/.laptop.pentest ]]; then
  source ~/.laptop.pentest
fi
